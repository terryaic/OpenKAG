import sys
import os
import shutil
from asr import upload_file,audio_file_process
from settings import MARKDOWN_URL,ASR_URL,PPT2PDF,DOC2PDF
from markdownclean import clean_markdown
from utils import remove_blank_lines
from filepp.adocx2txt import docx_to_txt
from filepp.apdf2txt import pdf2txt,extract_images_from_pdf, only_txt_pdf
from filepp.axlsx2txt import excel_to_markdown
from filepp.apptx2txt import pptx_to_txt
from filepp.bpptx2pdf import office_to_pdf
from filepp.adocx2pdf import docx_to_pdf
import time
from pathlib import Path
from llm import vlm_client

FORCE_MARKER = False

def doc2pdf(filepath, output_file):
    docx_to_pdf(filepath, output_file)
    return None
    
def pdf2text_remote(filepath):
    try:
        ret = upload_file([filepath], MARKDOWN_URL)
        if ret:
            return ret['text']
    except Exception as e:
        print(e)
        return ""
    return ret

def convert_docx(filepath):
    text = None
    try:
        text = docx_to_txt(filepath)
    except Exception as e:
        print(e)
        output_file = f"/tmp/{time.time()}.pdf"
        doc2pdf(filepath, output_file)
        text = pdf2txt(output_file) 
    return text

def image2text_remote(filepath, prompt_name, current_language):
    #判读图片的大小，最小是28
    text = vlm_client.get_answer(filepath, prompt_name, current_language)
    return text

class FileProcessPipeline():
    def __init__(self, output_dir, input_dir=""):
        self._output_dir = output_dir
        self._input_dir = input_dir if input_dir else ""

        #doc_id, prompt_name, current_language, support_multi_modal = False, if_use_muilt = False, extract_text = False

    def process_text(self, filepath, doc_id, prompt_name, current_language, support_multi_modal=False, extract_text=False):
        text = None
        print(f'processing: {filepath}')
        print("处理文件的语言是：",current_language)
        if filepath.endswith(".xlsx"):
            text = excel_to_markdown(filepath)
        elif filepath.endswith(".pptx"):
            text = pptx_to_txt(filepath)
        elif filepath.endswith(".docx"):
            """
            output_file = filepath.replace(".docx", ".pdf")
            doc2pdf(filepath, output_file)
            filepath = output_file
            """
            #text = docx_to_txt(filepath)
            text = convert_docx(filepath)
        elif filepath.endswith(".pdf"):
            #text = pdf2txt(filepath) 
            base_path = os.path.dirname(filepath) if not self._input_dir else self._input_dir
            images_output_path = os.path.join(base_path, Path(os.path.basename(filepath)).stem)
            try:
                os.mkdir(images_output_path)
            except Exception as e:
                print(e)
            text, images,nums,texts = extract_images_from_pdf(filepath, images_output_path,int(doc_id), get_text=True, extract_text=extract_text)
            if support_multi_modal:
                try:
                    for index, image in enumerate(images):
                        image_text = image2text_remote(image, prompt_name, current_language)
                        image_name = f"![]({os.path.basename(image)})"
                        text = text.replace(image_name, image_name + "\n" + image_text)
                except Exception as e:
                    print("pdf多模态是发生错误",e)
            # else:
            #     text, texts = only_txt_pdf(filepath, extract_text)
            if len(text) == 0 or FORCE_MARKER:
                text2 = pdf2text_remote(filepath)
                text = clean_markdown(text2 if text2 else text)
        elif filepath.endswith(".txt") or filepath.endswith(".md"):
            with open(filepath,'r') as fp:
                text = fp.read()
            #outfile = os.path.join(self._output_dir, os.path.basename(filepath))
            #shutil.copyfile(filepath, outfile) 
        elif support_multi_modal and (filepath.endswith(".jpg") or filepath.endswith(".jpeg") or filepath.endswith(".raw") or filepath.endswith(".png")) or filepath.endswith(".webp"):
            image_text = image2text_remote(filepath, prompt_name, current_language)
            text = (
                f"this document is generated by the image. \n"  # 使用 Markdown 的标题语法
                f"![](doc_{doc_id}_page_1_image_1_{os.path.basename(filepath)})\n"  # 使用加粗语法
                f"{image_text}\n"  # 使用加粗语法
            )
        elif filepath.endswith((".mp3", ".wav", ".m4a", ".flac", ".aac", ".ogg", ".opus", ".wma",".mp4")):
            audio_path=os.path.join(os.path.dirname(self._output_dir), "uploaded_files", filepath)
            if ASR_URL.find("localhost") >= 0:
                text=audio_file_process(audio_path,ASR_URL+"_path")
            else:
                ret = upload_file([audio_path], ASR_URL)
                text = ret['text']
        else:
            print("不在可执行的文件类型")
            text = ""
        return text

    def process_file(self, filepath, doc_id, prompt_name, current_language, support_multi_modal=False, extract_text=False):
        outfile = None
        if DOC2PDF and filepath.endswith(".doc"):
            dst_path = filepath.replace(Path(os.path.basename(filepath)).suffixes[0], '.pdf')
            office_to_pdf(filepath, dst_path)
            filepath = dst_path
        elif PPT2PDF and filepath.endswith(".ppt"):
            dst_path = filepath.replace(Path(os.path.basename(filepath)).suffixes[0], '.pdf')
            office_to_pdf(filepath, dst_path)
            filepath = dst_path
        text = self.process_text(filepath, doc_id, prompt_name, current_language, support_multi_modal=support_multi_modal, extract_text=extract_text)
        if text:
            outfile = os.path.join(self._output_dir, Path(os.path.basename(filepath)).stem +".txt")
            with open(outfile, "w") as fp:
                fp.write(text)
            #remove_blank_lines(outfile)
        return outfile

if __name__ == "__main__":
    infile = sys.argv[1]
    outdir = sys.argv[2]
    fp = FileProcessPipeline(outdir)
    fp.process_file(infile)
